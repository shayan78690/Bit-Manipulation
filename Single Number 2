class Solution {
    public int singleNumber(int[] nums) {
        int ones = 0;
        int twos = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            ones = (nums[i] ^ ones) & ~twos;
            twos = (nums[i] ^ twos) & ~ones;
        }
        return ones;
    }
}










class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i = 1; i < nums.length-1; i+=3) {
            if(nums[i] != nums[i-1]) {
                return nums[i-1];
            }
        }
        return nums[nums.length-1];
    }
}









class Solution {
    public int singleNumber(int[] nums) {
        int ans = 0;
        for (int bitIdx = 0; bitIdx < 32; bitIdx++) {
            int count = 0;
            for (int num : nums) {
                if ((num & (1 << bitIdx)) != 0) {
                    count++;
                }
            }
            // Only set this bit if it was set in the unique number
            if (count % 3 != 0) {
                ans |= (1 << bitIdx);
            }
        }
        return ans;
    }
}






class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num : nums) {
            map.put(num, map.getOrDefault(num, 0)+1);
        }
        
        int ans = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == 1) {
                ans = entry.getKey();
            }
        }
        return ans;
    }
}
