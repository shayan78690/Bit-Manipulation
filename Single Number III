class Solution {
    public int[] singleNumber(int[] nums) {
            int xor = 0;
    for (int num : nums) {
        xor ^= num;
    }

    // Step 2: Find any set bit in xor (rightmost bit)
    int diffBit = xor & (-xor);

    // Step 3: Divide into two groups & XOR separately
    int a = 0, b = 0;
    for (int num : nums) {
        if ((num & diffBit) == 0) {
            a ^= num;
        } else {
            b ^= num;
        }
    }

    return new int[] {a, b};
    }
}




import java.util.*;

class Solution {
    public int[] singleNumber(int[] nums) {
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        int[] ans = new int[2];
        int i = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                ans[i++] = entry.getKey();
            }
        }
        return ans;
    }
}
